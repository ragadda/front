{"ast":null,"code":"// action.js\nimport axios from 'axios';\nimport { CREATE_INGREDIENT_CATEGORY_FAILURE, CREATE_INGREDIENT_CATEGORY_SUCCESS, CREATE_INGREDIENT_SUCCESS, GET_INGREDIENTS, GET_INGREDIENT_CATEGORY_FAILURE, GET_INGREDIENT_CATEGORY_SUCCESS, UPDATE_STOCK } from './ActionType';\nimport { API_URL, api } from '../../../config/api';\nexport const getIngredientsOfRestaurant = ({\n  id,\n  jwt\n}) => {\n  return async dispatch => {\n    try {\n      const response = await api.get(`/api/admin/ingredients/restaurant/${id}`, {\n        headers: {\n          Authorization: `Bearer ${jwt}`\n        }\n      });\n      console.log(\"get all ingredients \", response.data);\n      dispatch({\n        type: GET_INGREDIENTS,\n        payload: response.data // Assuming the response contains the ingredients data\n      });\n    } catch (error) {\n      console.log(\"error\", error);\n      // Handle error, dispatch an error action, etc.\n    }\n  };\n};\n\nexport const createIngredient = ({\n  data,\n  jwt\n}) => {\n  return async dispatch => {\n    try {\n      const response = await api.post(`/api/admin/ingredients`, data, {\n        headers: {\n          Authorization: `Bearer ${jwt}`\n        }\n      });\n      console.log(\"create ingredients \", response.data);\n      dispatch({\n        type: CREATE_INGREDIENT_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      console.log(\"error\", error);\n      // Handle error, dispatch an error action, etc.\n    }\n  };\n};\n\nexport const createIngredientCategory = ({\n  data,\n  jwt\n}) => {\n  console.log(\"data \", data, \"jwt\", jwt);\n  return async dispatch => {\n    try {\n      const response = await api.post(`/api/admin/ingredients/category`, data, {\n        headers: {\n          Authorization: `Bearer ${jwt}`\n        }\n      });\n      console.log(\"create ingredients category\", response.data);\n      dispatch({\n        type: CREATE_INGREDIENT_CATEGORY_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      console.log(\"error\", error);\n      // Handle error, dispatch an error action, etc.\n    }\n  };\n};\n\nexport const getIngredientCategory = ({\n  id,\n  jwt\n}) => {\n  return async dispatch => {\n    try {\n      const response = await api.get(`/api/admin/ingredients/restaurant/${id}/category`, {\n        headers: {\n          Authorization: `Bearer ${jwt}`\n        }\n      });\n      console.log(\"get ingredients category\", response.data);\n      dispatch({\n        type: GET_INGREDIENT_CATEGORY_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  };\n};\nexport const updateStockOfIngredient = ({\n  id,\n  jwt\n}) => {\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await api.put(`/api/admin/ingredients/${id}/stoke`, {}, {\n        headers: {\n          Authorization: `Bearer ${jwt}`\n        }\n      });\n      dispatch({\n        type: UPDATE_STOCK,\n        payload: data\n      });\n      console.log(\"update ingredients stock \", data);\n    } catch (error) {\n      console.log(\"error \", error);\n      // Handle error, dispatch an error action, etc.\n    }\n  };\n};","map":{"version":3,"names":["axios","CREATE_INGREDIENT_CATEGORY_FAILURE","CREATE_INGREDIENT_CATEGORY_SUCCESS","CREATE_INGREDIENT_SUCCESS","GET_INGREDIENTS","GET_INGREDIENT_CATEGORY_FAILURE","GET_INGREDIENT_CATEGORY_SUCCESS","UPDATE_STOCK","API_URL","api","getIngredientsOfRestaurant","id","jwt","dispatch","response","get","headers","Authorization","console","log","data","type","payload","error","createIngredient","post","createIngredientCategory","getIngredientCategory","updateStockOfIngredient","put"],"sources":["C:/Users/Ragad Fares/Desktop/front/src/State/Admin/Ingredients/Action.js"],"sourcesContent":["// action.js\r\nimport axios from 'axios';\r\nimport { CREATE_INGREDIENT_CATEGORY_FAILURE, CREATE_INGREDIENT_CATEGORY_SUCCESS, CREATE_INGREDIENT_SUCCESS, GET_INGREDIENTS, GET_INGREDIENT_CATEGORY_FAILURE, GET_INGREDIENT_CATEGORY_SUCCESS, UPDATE_STOCK } from './ActionType';\r\nimport { API_URL, api } from '../../../config/api';\r\n\r\nexport const getIngredientsOfRestaurant = ({id,jwt}) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await api.get(`/api/admin/ingredients/restaurant/${id}`,{\r\n        headers: {\r\n          Authorization: `Bearer ${jwt}`,\r\n        },\r\n      });\r\n      console.log(\"get all ingredients \",response.data)\r\n      dispatch({\r\n        type: GET_INGREDIENTS,\r\n        payload: response.data // Assuming the response contains the ingredients data\r\n      });\r\n    } catch (error) {\r\n        console.log(\"error\",error)\r\n      // Handle error, dispatch an error action, etc.\r\n    }\r\n  };\r\n};\r\n\r\nexport const createIngredient = ({data,jwt}) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await api.post(`/api/admin/ingredients`,data,{\r\n        headers: {\r\n          Authorization: `Bearer ${jwt}`,\r\n        },\r\n      });\r\n      console.log(\"create ingredients \",response.data)\r\n      dispatch({\r\n        type: CREATE_INGREDIENT_SUCCESS,\r\n        payload: response.data \r\n      });\r\n    } catch (error) {\r\n        console.log(\"error\",error)\r\n      // Handle error, dispatch an error action, etc.\r\n    }\r\n  };\r\n};\r\n\r\nexport const createIngredientCategory = ({data,jwt}) => {\r\n  console.log(\"data \",data,\"jwt\",jwt)\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await api.post(`/api/admin/ingredients/category`,data,{\r\n        headers: {\r\n          Authorization: `Bearer ${jwt}`,\r\n        },\r\n      });\r\n      console.log(\"create ingredients category\",response.data)\r\n      dispatch({\r\n        type:CREATE_INGREDIENT_CATEGORY_SUCCESS,\r\n        payload: response.data \r\n      });\r\n    } catch (error) {\r\n        console.log(\"error\",error)\r\n      // Handle error, dispatch an error action, etc.\r\n    }\r\n  };\r\n};\r\n\r\nexport const getIngredientCategory = ({id,jwt}) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await api.get(`/api/admin/ingredients/restaurant/${id}/category`,{\r\n        headers: {\r\n          Authorization: `Bearer ${jwt}`,\r\n        },\r\n      });\r\n      console.log(\"get ingredients category\",response.data)\r\n      dispatch({\r\n        type: GET_INGREDIENT_CATEGORY_SUCCESS,\r\n        payload: response.data \r\n      });\r\n    } catch (error) {\r\n        console.log(\"error\",error)\r\n      \r\n    }\r\n  };\r\n};\r\n\r\nexport const updateStockOfIngredient = ({id,jwt}) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const {data} = await api.put(`/api/admin/ingredients/${id}/stoke`, \r\n      { },\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${jwt}`,\r\n        },\r\n      });\r\n      dispatch({\r\n        type: UPDATE_STOCK,\r\n        payload: data\r\n      });\r\n      console.log(\"update ingredients stock \",data)\r\n    } catch (error) {\r\n        console.log(\"error \",error)\r\n      // Handle error, dispatch an error action, etc.\r\n    }\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}